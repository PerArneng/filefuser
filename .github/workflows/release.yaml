name: release

# Only do the release on x.y.z tags.
on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

# We need write permission to create releases.
permissions:
  contents: write

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get release version from tag
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      - name: Show the version
        run: echo "Version is $VERSION"
      - name: Verify Cargo.toml version matches tag
        run: |
          if ! grep -q "version = \"$VERSION\"" Cargo.toml; then
            echo "Version in Cargo.toml does not match tag version ($VERSION)" >&2
            exit 1
          fi
      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create "$VERSION" --draft --verify-tag --title "$VERSION"
    outputs:
      version: ${{ env.VERSION }}

  build-release:
    name: build-release
    needs: create-release
    runs-on: ${{ matrix.os }}
    env:
      # Default cargo command; this may be overridden to 'cross' if a cross build is used.
      CARGO: cargo
      TARGET_FLAGS: ""
      TARGET_DIR: ./target
      CROSS_VERSION: v0.2.5
      RUST_BACKTRACE: 1
    strategy:
      fail-fast: false
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            rust: nightly
            target: "x86_64-unknown-linux-musl"
            strip: "x86_64-linux-musl-strip"
          - build: stable-x86
            os: ubuntu-latest
            rust: stable
            target: "i686-unknown-linux-gnu"
            strip: "x86_64-linux-gnu-strip"
            qemu: "i386"
          - build: stable-aarch64
            os: ubuntu-latest
            rust: stable
            target: "aarch64-unknown-linux-gnu"
            strip: "aarch64-linux-gnu-strip"
            qemu: "qemu-aarch64"
          - build: stable-arm-gnueabihf
            os: ubuntu-latest
            rust: stable
            target: "armv7-unknown-linux-gnueabihf"
            strip: "arm-linux-gnueabihf-strip"
            qemu: "qemu-arm"
          - build: stable-arm-musleabihf
            os: ubuntu-latest
            rust: stable
            target: "armv7-unknown-linux-musleabihf"
            strip: "arm-linux-musleabihf-strip"
            qemu: "qemu-arm"
          - build: stable-arm-musleabi
            os: ubuntu-latest
            rust: stable
            target: "armv7-unknown-linux-musleabi"
            strip: "arm-linux-musleabi-strip"
            qemu: "qemu-arm"
          - build: stable-powerpc64
            os: ubuntu-latest
            rust: stable
            target: "powerpc64-unknown-linux-gnu"
            strip: "powerpc64-linux-gnu-strip"
            qemu: "qemu-ppc64"
          - build: stable-s390x
            os: ubuntu-latest
            rust: stable
            target: "s390x-unknown-linux-gnu"
            strip: "s390x-linux-gnu-strip"
            qemu: "qemu-s390x"
          - build: macos
            os: macos-latest
            rust: nightly
            target: "x86_64-apple-darwin"
          - build: win-msvc
            os: windows-latest
            rust: nightly
            target: "x86_64-pc-windows-msvc"
          - build: win-gnu
            os: windows-latest
            rust: "nightly-x86_64-gnu"
            target: "x86_64-pc-windows-gnu"
          - build: win32-msvc
            os: windows-latest
            rust: nightly
            target: "i686-pc-windows-msvc"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: (Ubuntu) Install required packages
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Install any system dependencies if needed.
          echo "No additional packages required for filefuser release."

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}

      - name: Use Cross for non-native builds
        if: matrix.os == 'ubuntu-latest' && matrix.target != ''
        run: |
          dir="$RUNNER_TEMP/cross-download"
          mkdir -p "$dir"
          echo "$dir" >> $GITHUB_PATH
          cd "$dir"
          curl -LO "https://github.com/cross-rs/cross/releases/download/$CROSS_VERSION/cross-x86_64-unknown-linux-musl.tar.gz"
          tar xf cross-x86_64-unknown-linux-musl.tar.gz
          echo "CARGO=cross" >> $GITHUB_ENV

      - name: Set target variables
        run: |
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

      - name: Show Cargo command and target info
        run: |
          echo "Using cargo command: $CARGO"
          echo "Target flags: $TARGET_FLAGS"
          echo "Target directory: $TARGET_DIR"

      - name: Build release binary
        run: |
          $CARGO build --verbose --release $TARGET_FLAGS
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            bin="target/${{ matrix.target }}/release/filefuser.exe"
          else
            bin="target/${{ matrix.target }}/release/filefuser"
          fi
          echo "BIN=$bin" >> $GITHUB_ENV

      - name: Strip release binary (macOS)
        if: matrix.os == 'macos-latest'
        run: strip "$BIN"

      - name: Strip release binary (cross builds)
        if: env.CARGO == 'cross'
        run: |
          docker run --rm -v "$PWD/target:/target:Z" "ghcr.io/cross-rs/${{ matrix.target }}:main" "${{ matrix.strip }}" "/$BIN"

      - name: Determine archive name
        run: |
          version="${{ needs.create-release.outputs.version }}"
          if [ -z "${{ matrix.target }}" ]; then
            targetName="${{ matrix.os }}"
          else
            targetName="${{ matrix.target }}"
          fi
          echo "ARCHIVE=filefuser-$version-$targetName" >> $GITHUB_ENV

      - name: Create archive directory and copy assets
        run: |
          mkdir -p "$ARCHIVE"
          cp "$BIN" "$ARCHIVE/"
          # Copy additional assets if available.
          [ -f README.md ] && cp README.md "$ARCHIVE/"
          [ -f LICENSE ] && cp LICENSE "$ARCHIVE/"

      - name: Build release archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          7z a "$ARCHIVE.zip" "$ARCHIVE"
          certutil -hashfile "$ARCHIVE.zip" SHA256 > "$ARCHIVE.zip.sha256"
          echo "ASSET=$ARCHIVE.zip" >> $GITHUB_ENV
          echo "ASSET_SUM=$ARCHIVE.zip.sha256" >> $GITHUB_ENV

      - name: Build release archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          tar czf "$ARCHIVE.tar.gz" "$ARCHIVE"
          shasum -a 256 "$ARCHIVE.tar.gz" > "$ARCHIVE.tar.gz.sha256"
          echo "ASSET=$ARCHIVE.tar.gz" >> $GITHUB_ENV
          echo "ASSET_SUM=$ARCHIVE.tar.gz.sha256" >> $GITHUB_ENV

      - name: Upload release asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version="${{ needs.create-release.outputs.version }}"
          gh release upload "$version" $ASSET $ASSET_SUM
